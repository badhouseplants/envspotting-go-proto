// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package applications

import (
	context "context"
	common "github.com/allanger/gitlab-environment-aggregator/models/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationsClient is the client API for Applications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsClient interface {
	/// Use to add a whole new app
	Create(ctx context.Context, in *AppNameAndDescription, opts ...grpc.CallOption) (*AppWithoutContours, error)
	/// Use to get app by ProjectID
	Get(ctx context.Context, in *AppId, opts ...grpc.CallOption) (*AppFullInfo, error)
	/// Use to list all apps in db
	List(ctx context.Context, in *ListOptions, opts ...grpc.CallOption) (Applications_ListClient, error)
	/// Use to update an app (add/edit contour, edit name)
	Update(ctx context.Context, in *AppWithoutContours, opts ...grpc.CallOption) (*AppWithoutContours, error)
	/// Use to delete an app
	Delete(ctx context.Context, in *AppIdAndName, opts ...grpc.CallOption) (*common.EmptyMessage, error)
}

type applicationsClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsClient(cc grpc.ClientConnInterface) ApplicationsClient {
	return &applicationsClient{cc}
}

func (c *applicationsClient) Create(ctx context.Context, in *AppNameAndDescription, opts ...grpc.CallOption) (*AppWithoutContours, error) {
	out := new(AppWithoutContours)
	err := c.cc.Invoke(ctx, "/apps.Applications/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Get(ctx context.Context, in *AppId, opts ...grpc.CallOption) (*AppFullInfo, error) {
	out := new(AppFullInfo)
	err := c.cc.Invoke(ctx, "/apps.Applications/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) List(ctx context.Context, in *ListOptions, opts ...grpc.CallOption) (Applications_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Applications_ServiceDesc.Streams[0], "/apps.Applications/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Applications_ListClient interface {
	Recv() (*AppWithoutContours, error)
	grpc.ClientStream
}

type applicationsListClient struct {
	grpc.ClientStream
}

func (x *applicationsListClient) Recv() (*AppWithoutContours, error) {
	m := new(AppWithoutContours)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsClient) Update(ctx context.Context, in *AppWithoutContours, opts ...grpc.CallOption) (*AppWithoutContours, error) {
	out := new(AppWithoutContours)
	err := c.cc.Invoke(ctx, "/apps.Applications/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Delete(ctx context.Context, in *AppIdAndName, opts ...grpc.CallOption) (*common.EmptyMessage, error) {
	out := new(common.EmptyMessage)
	err := c.cc.Invoke(ctx, "/apps.Applications/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServer is the server API for Applications service.
// All implementations must embed UnimplementedApplicationsServer
// for forward compatibility
type ApplicationsServer interface {
	/// Use to add a whole new app
	Create(context.Context, *AppNameAndDescription) (*AppWithoutContours, error)
	/// Use to get app by ProjectID
	Get(context.Context, *AppId) (*AppFullInfo, error)
	/// Use to list all apps in db
	List(*ListOptions, Applications_ListServer) error
	/// Use to update an app (add/edit contour, edit name)
	Update(context.Context, *AppWithoutContours) (*AppWithoutContours, error)
	/// Use to delete an app
	Delete(context.Context, *AppIdAndName) (*common.EmptyMessage, error)
	mustEmbedUnimplementedApplicationsServer()
}

// UnimplementedApplicationsServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationsServer struct {
}

func (UnimplementedApplicationsServer) Create(context.Context, *AppNameAndDescription) (*AppWithoutContours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationsServer) Get(context.Context, *AppId) (*AppFullInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApplicationsServer) List(*ListOptions, Applications_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApplicationsServer) Update(context.Context, *AppWithoutContours) (*AppWithoutContours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationsServer) Delete(context.Context, *AppIdAndName) (*common.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationsServer) mustEmbedUnimplementedApplicationsServer() {}

// UnsafeApplicationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServer will
// result in compilation errors.
type UnsafeApplicationsServer interface {
	mustEmbedUnimplementedApplicationsServer()
}

func RegisterApplicationsServer(s grpc.ServiceRegistrar, srv ApplicationsServer) {
	s.RegisterService(&Applications_ServiceDesc, srv)
}

func _Applications_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppNameAndDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Applications/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Create(ctx, req.(*AppNameAndDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Applications/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Get(ctx, req.(*AppId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationsServer).List(m, &applicationsListServer{stream})
}

type Applications_ListServer interface {
	Send(*AppWithoutContours) error
	grpc.ServerStream
}

type applicationsListServer struct {
	grpc.ServerStream
}

func (x *applicationsListServer) Send(m *AppWithoutContours) error {
	return x.ServerStream.SendMsg(m)
}

func _Applications_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppWithoutContours)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Applications/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Update(ctx, req.(*AppWithoutContours))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdAndName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Applications/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Delete(ctx, req.(*AppIdAndName))
	}
	return interceptor(ctx, in, info, handler)
}

// Applications_ServiceDesc is the grpc.ServiceDesc for Applications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Applications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apps.Applications",
	HandlerType: (*ApplicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Applications_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Applications_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Applications_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Applications_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Applications_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apps/applications/applications_v1.proto",
}
