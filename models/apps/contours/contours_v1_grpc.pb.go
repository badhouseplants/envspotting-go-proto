// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contours

import (
	context "context"
	common "github.com/badhouseplants/envspotting-go-proto/models/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContoursClient is the client API for Contours service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContoursClient interface {
	/// Use to add a whole new app
	Create(ctx context.Context, in *ContourNameAndDescription, opts ...grpc.CallOption) (*ContourInfoWithoutServices, error)
	/// Use to get app by ProjectID
	Get(ctx context.Context, in *ContourId, opts ...grpc.CallOption) (*ContourInfo, error)
	/// Use to list all apps in db
	List(ctx context.Context, in *ContoursListOption, opts ...grpc.CallOption) (Contours_ListClient, error)
	/// Use to update an app (add/edit contour, edit name)
	Update(ctx context.Context, in *ContourInfoWithoutServices, opts ...grpc.CallOption) (*ContourInfoWithoutServices, error)
	/// Use to delete an app (❗️not implemented yet❗️)
	Delete(ctx context.Context, in *ContourIdAndName, opts ...grpc.CallOption) (*common.EmptyMessage, error)
	/// Use to add a services to the contour
	AddServices(ctx context.Context, in *RepeatedServiceWithoutId, opts ...grpc.CallOption) (*common.EmptyMessage, error)
	/// Use to rmove services from the contour
	RemoveService(ctx context.Context, in *ServiceIdAndContourId, opts ...grpc.CallOption) (*common.EmptyMessage, error)
}

type contoursClient struct {
	cc grpc.ClientConnInterface
}

func NewContoursClient(cc grpc.ClientConnInterface) ContoursClient {
	return &contoursClient{cc}
}

func (c *contoursClient) Create(ctx context.Context, in *ContourNameAndDescription, opts ...grpc.CallOption) (*ContourInfoWithoutServices, error) {
	out := new(ContourInfoWithoutServices)
	err := c.cc.Invoke(ctx, "/apps.Contours/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contoursClient) Get(ctx context.Context, in *ContourId, opts ...grpc.CallOption) (*ContourInfo, error) {
	out := new(ContourInfo)
	err := c.cc.Invoke(ctx, "/apps.Contours/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contoursClient) List(ctx context.Context, in *ContoursListOption, opts ...grpc.CallOption) (Contours_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Contours_ServiceDesc.Streams[0], "/apps.Contours/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &contoursListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Contours_ListClient interface {
	Recv() (*ContourInfo, error)
	grpc.ClientStream
}

type contoursListClient struct {
	grpc.ClientStream
}

func (x *contoursListClient) Recv() (*ContourInfo, error) {
	m := new(ContourInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contoursClient) Update(ctx context.Context, in *ContourInfoWithoutServices, opts ...grpc.CallOption) (*ContourInfoWithoutServices, error) {
	out := new(ContourInfoWithoutServices)
	err := c.cc.Invoke(ctx, "/apps.Contours/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contoursClient) Delete(ctx context.Context, in *ContourIdAndName, opts ...grpc.CallOption) (*common.EmptyMessage, error) {
	out := new(common.EmptyMessage)
	err := c.cc.Invoke(ctx, "/apps.Contours/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contoursClient) AddServices(ctx context.Context, in *RepeatedServiceWithoutId, opts ...grpc.CallOption) (*common.EmptyMessage, error) {
	out := new(common.EmptyMessage)
	err := c.cc.Invoke(ctx, "/apps.Contours/AddServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contoursClient) RemoveService(ctx context.Context, in *ServiceIdAndContourId, opts ...grpc.CallOption) (*common.EmptyMessage, error) {
	out := new(common.EmptyMessage)
	err := c.cc.Invoke(ctx, "/apps.Contours/RemoveService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContoursServer is the server API for Contours service.
// All implementations must embed UnimplementedContoursServer
// for forward compatibility
type ContoursServer interface {
	/// Use to add a whole new app
	Create(context.Context, *ContourNameAndDescription) (*ContourInfoWithoutServices, error)
	/// Use to get app by ProjectID
	Get(context.Context, *ContourId) (*ContourInfo, error)
	/// Use to list all apps in db
	List(*ContoursListOption, Contours_ListServer) error
	/// Use to update an app (add/edit contour, edit name)
	Update(context.Context, *ContourInfoWithoutServices) (*ContourInfoWithoutServices, error)
	/// Use to delete an app (❗️not implemented yet❗️)
	Delete(context.Context, *ContourIdAndName) (*common.EmptyMessage, error)
	/// Use to add a services to the contour
	AddServices(context.Context, *RepeatedServiceWithoutId) (*common.EmptyMessage, error)
	/// Use to rmove services from the contour
	RemoveService(context.Context, *ServiceIdAndContourId) (*common.EmptyMessage, error)
	mustEmbedUnimplementedContoursServer()
}

// UnimplementedContoursServer must be embedded to have forward compatible implementations.
type UnimplementedContoursServer struct {
}

func (UnimplementedContoursServer) Create(context.Context, *ContourNameAndDescription) (*ContourInfoWithoutServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContoursServer) Get(context.Context, *ContourId) (*ContourInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContoursServer) List(*ContoursListOption, Contours_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedContoursServer) Update(context.Context, *ContourInfoWithoutServices) (*ContourInfoWithoutServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContoursServer) Delete(context.Context, *ContourIdAndName) (*common.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContoursServer) AddServices(context.Context, *RepeatedServiceWithoutId) (*common.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServices not implemented")
}
func (UnimplementedContoursServer) RemoveService(context.Context, *ServiceIdAndContourId) (*common.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (UnimplementedContoursServer) mustEmbedUnimplementedContoursServer() {}

// UnsafeContoursServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContoursServer will
// result in compilation errors.
type UnsafeContoursServer interface {
	mustEmbedUnimplementedContoursServer()
}

func RegisterContoursServer(s grpc.ServiceRegistrar, srv ContoursServer) {
	s.RegisterService(&Contours_ServiceDesc, srv)
}

func _Contours_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContourNameAndDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContoursServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Contours/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContoursServer).Create(ctx, req.(*ContourNameAndDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contours_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContourId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContoursServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Contours/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContoursServer).Get(ctx, req.(*ContourId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contours_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContoursListOption)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContoursServer).List(m, &contoursListServer{stream})
}

type Contours_ListServer interface {
	Send(*ContourInfo) error
	grpc.ServerStream
}

type contoursListServer struct {
	grpc.ServerStream
}

func (x *contoursListServer) Send(m *ContourInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Contours_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContourInfoWithoutServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContoursServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Contours/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContoursServer).Update(ctx, req.(*ContourInfoWithoutServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contours_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContourIdAndName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContoursServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Contours/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContoursServer).Delete(ctx, req.(*ContourIdAndName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contours_AddServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatedServiceWithoutId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContoursServer).AddServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Contours/AddServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContoursServer).AddServices(ctx, req.(*RepeatedServiceWithoutId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contours_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceIdAndContourId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContoursServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.Contours/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContoursServer).RemoveService(ctx, req.(*ServiceIdAndContourId))
	}
	return interceptor(ctx, in, info, handler)
}

// Contours_ServiceDesc is the grpc.ServiceDesc for Contours service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contours_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apps.Contours",
	HandlerType: (*ContoursServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Contours_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Contours_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Contours_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Contours_Delete_Handler,
		},
		{
			MethodName: "AddServices",
			Handler:    _Contours_AddServices_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _Contours_RemoveService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Contours_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apps/contours/contours_v1.proto",
}
